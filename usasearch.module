<?php
/**
 * @file
 * Replaces Drupal search, redirects all search queries to USASearch service (http://search.usa.gov).
 */

/**
 * Implements hook_search_info().
 */
function usasearch_search_info() {
  return array(
    'title' => 'Content',
    'path' => 'content',
    //'conditions_callback' => 'callback_search_conditions',
  );
}

/**
 * Implements hook_preprocess_page().
 * To output required javascript and css references.
 */
function usasearch_preprocess_page(&$variables) {
  module_load_include('inc', 'usasearch');
  $mode = usasearch_get_mode();
  if ($mode == 'redirect') {
    // Declare the variable
    $inline_js = '';
    // Check for usasearch_affiliate_name variable, if set output javascript and css references.
    // Detailed info about this USASearch feature here: http://usasearch.howto.gov/post/18861028503/how-to-add-our-code-to-your-website.
    if (variable_get('usasearch_affiliate_name', '')) {
      $affiliate_name = variable_get('usasearch_affiliate_name', '') ? check_plain(variable_get('usasearch_affiliate_name', '')) : '';
      $action_domain = check_plain(variable_get('usasearch_action_domain', 'search.usa.gov'));

      $inline_js .= "var usasearch_config = { siteHandle:'$affiliate_name' };\n";
      if ($action_domain != 'search.usa.gov') {
        $inline_js .= "usasearch_config['host'] = '//$action_domain'\n";
      }
      $inline_js .= "var script = document.createElement('script');\n";
      $inline_js .= "script.type = 'text/javascript';\n";
      $inline_js .= "script.src = '//$action_domain/javascripts/remote.loader.js';\n";
      $inline_js .= "document.getElementsByTagName('head')[0].appendChild(script);\n";
    }
    // Output contents of $inline_js into one combined inline javascript tag using drupal_add_js function.
    drupal_add_js($inline_js, 'inline');
  }
}

/**
 * Implements hook_menu().
 * Adds admin screen under settings.
 */
function usasearch_menu() {
  $items = array();

  $items['admin/config/search/usasearch'] = array(
    'title' => 'USASearch settings',
    'description' => 'Contains settings for customizing site search to use USASearch',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('usasearch_admin'),
    'access arguments' => array('administer search'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'usasearch.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 * Point /search and /search/node/% paths to new callbacks.
 */
function usasearch_menu_alter(&$items) {
  if (!variable_get('usasearch_search_page', 0)) {
    $items['search'] = array(
      'access arguments' => array('search content'),
      'description' => 'Search Results',
      'page callback' => 'usasearch_page',
      'type' => MENU_CALLBACK,
      'file' => drupal_get_path('module', 'usasearch') . '/usasearch.pages.inc',
    );

    $items['search/content/%'] = array(
      'access arguments' => array('search content'),
      'description' => 'Search Results',
      'page callback' => 'usasearch_page',
      'page arguments' => array(2),
      'type' => MENU_CALLBACK,
      'file' => drupal_get_path('module', 'usasearch') . '/usasearch.pages.inc',
    );
  }
}

/**
 * Implements hook_form_alter().
 *
 * Changes elements in the search block, search theme form, search page form.
 */
function usasearch_form_alter(&$form, &$form_state, $form_id) {

  // Search block and search box have similar form structure.
  if ($form_id == 'search_block_form' || $form_id == 'search_theme_form' || $form_id == 'search_form') {
    module_load_include('inc', 'usasearch');
    $mode = usasearch_get_mode();

    $url = drupal_parse_url(current_path());

    // API mode search.
    if ($mode == 'api') {
      // The 'dc' element to specific document collections.
      $form['dc'] = array(
        '#type' => 'select',
        '#title' => t('Collection'),
        // @todo Replace this with values derived from an admin variable.
        '#options' => array('' => 'none', 'test' => 'test'),
        '#default_value' => isset($url['query']['dc']) ? $url['query']['dc'] : 'none',
      );

      // Replace the default submit function with our own.
      $form['#submit'][] = 'usasearch_search_form_submit';
      unset($form['#submit']['search_form_submit']);
    }
    // Redirect mode search.
    else {
      // Set action method, location and read affiliate from variable.
      $form['#method'] = 'get';
      $form['#action'] = '//' . check_plain(variable_get('usasearch_action_domain', 'search.usa.gov')) . '/search';
      // Check for affiliate_name variable before printing the affiliate form element.
      if ($affiliate_name = check_plain(variable_get('usasearch_affiliate_name', ''))) {
        $form['affiliate'] = array('#type' => 'hidden', '#value' => $affiliate_name);
      }
      // Remove unnecessary, hidden input fields.
      unset($form['form_build_id']);
      unset($form['form_token']);
      unset($form['form_id']);

      if ($form_id == 'search_form') {
        // Change text field name to query and unset advanced search in search_form.
        $form['basic']['inline']['keys']['#name'] = 'query';
        unset($form['advanced']);
        // Add autocomplete classes and set autocomplete HTML attribute to off on text field for type-ahead feature.
        if (variable_get('usasearch_affiliate_name', '')) {
          $form['basic']['inline']['keys']['#attributes'] = array('class' => array('usagov-search-autocomplete', 'ui-autocomplete-input', 'ui-corner-all'), 'autocomplete' => 'off');
        }
      }
      else {
        // Change text field name to query and title in search_block_form and search_theme_form.
        $form[$form_id]['#name'] = 'query';
        $form[$form_id]['#title'] = t('Search using USASearch');
        // Add autocomplete classes and set autocomplete HTML attribute to off on text field for type-ahead feature.
        if (variable_get('usasearch_affiliate_name', '')) {
          $form[$form_id]['#attributes'] = array('class' => array('usagov-search-autocomplete', 'ui-autocomplete-input', 'ui-corner-all'), 'autocomplete' => 'off');
        }
      }
    }
  }
}

/**
 * Submit callback for search form when using API mode.
 *
 * This is very similar to search_form_submit, but it passes the additional
 * 'dc' parameter.
 *
 * @see search_submit()
 */
function usasearch_search_form_submit($form, &$form_state) {
  $keys = $form_state['values']['processed_keys'];
  if ($keys == '') {
    form_set_error('keys', t('Please enter some keywords.'));
    // Fall through to the form redirect.
  }

  $destination = array($form_state['action'] . '/' . $keys);
  if (!empty($form_state['values']['dc'])) {
    $destination[1] = array(
      'query' => array('dc' => $form_state['values']['dc']),
    );
  }

  $form_state['redirect'] = $destination;
}

/**
 * Implements template_preprocess_search_result().
 *
 * The primary purpose is to remove check_plain() from $result['title'] so
 * that it may contain HTML like <b></b>. Otherwise, this is unchanged from
 * original.
 *
 * @see template_preprocess_search_result().
 */
function usasearch_preprocess_search_result(&$variables) {
  global $language;

  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = filter_xss($result['title'], array('b'));
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    $info['date'] = format_date($result['date'], 'short');
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
}
