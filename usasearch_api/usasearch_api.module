<?php

/**
 * Implements hook_search_info().
 */
function usasearch_api_search_info() {
  return array(
    'title' => 'All',
    'path' => 'all',
    'conditions_callback' => 'usasearch_api_conditions',
  );
}

/**
 * Implements hook_cron().
 */
function hook_cron() {
  usasearch_api_fetch_logo();
}

/**
 * Callback for conditions_callback property in hook_search_info().
 */
function usasearch_api_conditions() {
  $conditions = array();

  if (!empty($_REQUEST['keys'])) {
    $conditions['keys'] = $_REQUEST['keys'];
  }
  if (!empty($_REQUEST['dc'])) {
    $conditions['dc'] = $_REQUEST['dc'];
  }
  if (!empty($_REQUEST['sort_by'])) {
    $conditions['sort_by'] = $_REQUEST['sort_by'];
  }

  return $conditions;
}

/**
 * Implements hook_search_execute().
 */
function usasearch_api_search_execute($keys = NULL, $conditions = NULL) {
  module_load_include('inc', 'usasearch_api');
  $module = 'usasearch_api';
  $results = usasearch_api_get_results($keys, $conditions, $module);

  return $results;
}

/**
 * Implements hook_form_alter().
 */
function usasearch_api_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'search_form') {
    module_load_include('inc', 'usasearch_api');
    ctools_include('object-cache');
    $response = ctools_object_cache_get('search_response', 'usasearch_api');

    if (!empty($response)) {
      $params = drupal_get_query_parameters();
      $link_options = array('query' => $params);

      // Include a 'did you mean' spelling suggestion if it was returned.
      // @todo Add variable to enable or disable this.
      if (!empty($response['spelling_suggestion'])) {
        $suggestion = check_plain($response['spelling_suggestion']);
        $suggestion_link =  l($suggestion, $form_state['action'] . '/'. $suggestion, $link_options);
        $form['spelling_suggestion'] = array(
          '#markup' => t('Did you mean !suggestion?', array('!suggestion' => $suggestion_link)),
        );
      }

      // Include 'related search' fieldset if it was returned.
      // @todo Add variable to enable or disable this.
      if (!empty($response['related'])) {
        $form['related'] = array(
          '#type' => 'fieldset',
          '#title' => t('Related Searches'),
        );
        foreach ($response['related'] as $key => $related) {
          $related_link = l(check_plain($related), $form_state['action'] . '/'. check_plain($related), $link_options);
          $form['related'][$key] = array(
            '#prefix' => '<div class="related-search">',
            '#markup' => $related_link,
            '#suffix' => '</div>',
          );
        }
      }

      // Display for web, docs, and image searches. This is required by the
      // USASearch Terms of Service.
      if (in_array($form['module']['#value'], array('usasearch_api', 'usasearch_docs', 'usasearch_images'))) {
        $form['logo'] = usasearch_api_logo();
        $form['logo']['#weight'] = 100;
      }
    }

    // Replace the default submit function with our own.
    $form['#submit'][] = 'usasearch_api_search_form_submit';
    unset($form['#submit']['search_form_submit']);
  }
}

/**
 * Submit callback for search form when using API mode.
 *
 * This is very similar to search_form_submit, but it passes the additional
 * 'dc' parameter.
 *
 * @see search_submit()
 */
function usasearch_api_search_form_submit($form, &$form_state) {

  $keys = $form_state['values']['processed_keys'];
  if ($keys == '') {
    form_set_error('keys', t('Please enter some keywords.'));
    // Fall through to the form redirect.
  }

  // Clear previous search result cache.
  ctools_include('object-cache');
  ctools_object_cache_clear('search_response', 'usasearch_api');

  // Create destination.
  $destination = array($form_state['action'] . '/' . $keys);
  if (!empty($form_state['redirect_query'])) {
    $destination[1]['query'] = array();
    foreach ($form_state['redirect_query'] as $key => $value) {
      $destination[1]['query'][$key] = $value;
    }
  }

  $form_state['redirect'] = $destination;
}


/**
 * Implements template_preprocess_search_result().
 *
 * The primary purpose is to remove check_plain() from $result['title'] so
 * that it may contain HTML like <b></b>. Otherwise, this is unchanged from
 * original.
 *
 * @see template_preprocess_search_result().
 */
function usasearch_api_preprocess_search_result(&$variables) {
  global $language;

  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = filter_xss($result['title'], array('b'));
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    $info['date'] = format_date($result['date'], 'short');
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
}

/**
 * Implements hook_block_info().
 */
function usasearch_api_block_info() {

  $blocks['usasearch_boosted_results'] = array(
    'info' => t('USASearch: Boosted Results'),
    'cache' => DRUPAL_NO_CACHE,
    'pages' => 'search/*',
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function usasearch_api_block_view($delta = '') {
  switch ($delta) {
    case 'usasearch_boosted_results':
      ctools_include('object-cache');
      $response = ctools_object_cache_get('search_response', 'usasearch_api');

      $block['subject'] = t('Boosted Results');

      // @todo theme boosted results.
      //$block['content'] = usasearch_format_boosted_results();
      $block['content'] = '';
      break;
  }
  return $block;
}
